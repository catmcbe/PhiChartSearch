name: 构建与发布 PyQT 版 ChartAnalyzer

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号（例如：v1.0.0）'
        required: true
        type: string
      publish_release:
        description: '是否发布到GitHub Releases'
        required: true
        type: boolean
        default: false

jobs:
  build:
    name: 在 ${{ matrix.os }} 上构建
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            system: linux
            ext: ''
            asset-name: PyQT_PhiChartSearch_${{ github.event.inputs.version }}_linux_x64
            data-sep: ":"
          - os: windows-latest
            system: windows
            ext: '.exe'
            asset-name: PyQT_PhiChartSearch_${{ github.event.inputs.version }}_windows_x64
            data-sep: ";"
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: 验证文件结构（Linux）
      run: |
        if [ -f "QT_ChartAnalyzer.py" ] && [ -f "icon.ico" ]; then
          echo "源码文件结构正确"
        else
          echo "错误：文件缺失！" && exit 1
        fi
      if: matrix.os == 'ubuntu-latest'
      shell: bash

    - name: 验证文件结构（Windows）
      run: |
        if exist "QT_ChartAnalyzer.py" if exist "icon.ico" (
          echo 源码文件结构正确
        ) else (
          echo 错误：文件缺失！ && exit 1
        )
      if: matrix.os == 'windows-latest'
      shell: cmd

    - name: 配置Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: 构建（Linux）
      run: |
        pyinstaller --onefile --windowed \
          --name="${{ matrix.asset-name }}" \
          --icon="icon.ico" \
          --add-data "icon.ico${{ matrix.data-sep }}." \
          ./QT_ChartAnalyzer.py
        echo "Linux 产物列表"
        ls -l dist/
      if: matrix.os == 'ubuntu-latest'
      shell: bash

    - name: 构建（Windows）
      run: |
        pyinstaller --onefile --windowed ^
          --name="${{ matrix.asset-name }}" ^
          --icon="icon.ico" ^
          --add-data "icon.ico${{ matrix.data-sep }}." ^
          .\QT_ChartAnalyzer.py
        echo "Windows 产物列表"
        dir dist\
      if: matrix.os == 'windows-latest'
      shell: cmd

    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset-name }}${{ matrix.ext }}
        path: |
          dist/${{ matrix.asset-name }}${{ matrix.ext }}
          dist/icon.ico
        if-no-files-found: error

  release:
    needs: build
    if: ${{ github.event.inputs.publish_release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    name: 发布版本 ${{ github.event.inputs.version }}

    steps:
      - name: 检出Git仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 下载产物
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 查看产物结构
        run: |
          echo "产物结构"
          ls -lR ./artifacts
        shell: bash

      - name: 确认PyQt标签存在
        run: |
          if ! git tag | grep -q "^PyQt$"; then
            git tag PyQt && git push origin PyQt
          fi
        shell: bash

      - name: 发布到Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: PyQt
          name: PyQT版 ${{ github.event.inputs.version }}
          body_path: release.md
          files: |
            ./artifacts/PyQT_PhiChartSearch_${{ github.event.inputs.version }}_linux_x64/*
            ./artifacts/PyQT_PhiChartSearch_${{ github.event.inputs.version }}_windows_x64.exe/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}